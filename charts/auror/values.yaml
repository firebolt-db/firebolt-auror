---
# Default values for auror.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: firebolt-auror/auror
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  privileged: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8443

  metrics:
    port: 8080


resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    memory: 48Mi
  requests:
    cpu: 100m
    memory: 48Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /healthz
    port: metrics
readinessProbe:
  httpGet:
    path: /healthz
    port: metrics

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


dockerConfig: |
  {"credHelpers": {"123456789123.dkr.ecr.us-east-1.amazonaws.com": "ecr-login"}}


certificate:
  enabled: true

cosign:
  publicKey: |
    
env:
  enabled: false
  awsRoleArn: "arn:aws:iam::123456789123:role/firebolt-auror-auror"
  kind:
    enabled: false


args:
  enabled: true
  # This is for the mode of the auror. 
  # "audit" - audit all requests
  # "deny" - deny all requests
  mode: "audit"
  cert: "/etc/auror/certs/tls.crt"
  key: "/etc/auror/certs/tls.key"
  publicKey: "/cosign/cosign.pub"
  registry: "123456789123.dkr.ecr.us-east-1.amazonaws.com"
  logLevel: "info"
  # number of cache entries
  digestCacheSize: 1000
  # ttl in hours 
  digestCacheTTL: 12
  # number of cache entries
  tagCacheSize: 1000
  # ttl in hours 
  tagCacheTTL: 12
  # number of cache entries
  ownerCacheSize: 1000
  # ttl in hours 
  ownerCacheTTL: 12
  # disable/enable tag cache
  useTagCache: false
  
validatingWebhook:
  enabled: true
  failurePolicy: Ignore
  timeoutSeconds: 5
  fullReview: true
  caBundle: ""
  rules:
    - apiGroups: [""]
      apiVersions: ["v1"]
      operations: ["CREATE", "UPDATE"]
      resources: ["pods"]
    - apiGroups: ["apps"]
      apiVersions: ["v1"]
      operations: ["CREATE", "UPDATE"]
      resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
    - apiGroups: ["batch"]
      apiVersions: ["v1"]
      operations: ["CREATE", "UPDATE"]
      resources: ["jobs", "cronjobs"]

serviceMonitor:
  # enabled: false
  # namespace: monitoring
  # labels: {}
  # endpoints: {}
  enabled: true
  namespace: firebolt-auror
  endpoints:
    default:
      interval: 10s
      scrapeTimeout: 10s
      honorLabels: true
      path: /metrics
      port: metrics
      scheme: http
